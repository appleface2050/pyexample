#!/usr/bin/env python
# -*- coding: utf-8 -*-

# class Fab(object):
#
#     def __init__(self, max):
#         self.max = max
#         self.n, self.a, self.b = 0, 0, 1
#
#     def __iter__(self):
#         return self
#
#     def next(self):
#         if self.n < self.max:
#             r = self.b
#             self.a, self.b = self.b, self.a + self.b
#             self.n = self.n + 1
#             return r
#         raise StopIteration()
#
# def fab(max):
#     n, a, b = 0, 0, 1
#     while n < max:
#         yield b
#         # print b
#         a, b = b, a + b
#         n = n + 1

def te(a,b):
    c = yield a>b
    d = yield b>a
    print c,d


def read_file(fpath):
    """
    使用生成器固定长度读取文件
    """
    BLOCK_SIZE = 8
    with open(fpath, 'rb') as f:
        while True:
            block = f.read(BLOCK_SIZE)
            if block:
                yield block
            else:
                return

if __name__ == '__main__':
    a = read_file("tt.py")
    for i in a:
        print i,
